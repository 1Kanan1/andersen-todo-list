services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "8000:8000"
    depends_on:
      postgres_db:
        # Check if Postgres is ready before connecting
        condition: service_healthy
    command: >
      sh -c "
      python manage.py migrate &&
      gunicorn config.wsgi -b 0.0.0.0:8000
      "

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - app_network
    ports:
      - "3000:3000"
    depends_on:
      - backend

  postgres_db:
    image: postgres:17-alpine
    restart: always
    expose:
      - 5432
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    # NOTE: Use to give Postgres time to boot in Docker; Podman can compose without it
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER", "-d", "$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge
    labels:
      com.docker.compose.network: app_network

volumes:
  postgres_data:
